{"ast":null,"code":"import { resolveComponent as _resolveComponent, createVNode as _createVNode, createElementVNode as _createElementVNode, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = {\n  class: \"row\"\n};\nconst _hoisted_2 = {\n  class: \"col-lg-2 col-md-2 col-sm-2 partlt shadow\"\n};\nconst _hoisted_3 = /*#__PURE__*/_createElementVNode(\"div\", {\n  class: \"col-lg-10\"\n}, null, -1 /* HOISTED */);\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_ParteLateral = _resolveComponent(\"ParteLateral\");\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createElementVNode(\"div\", _hoisted_2, [_createVNode(_component_ParteLateral)]), _hoisted_3]);\n}","map":{"version":3,"names":["class","_createElementVNode","_createElementBlock","_hoisted_1","_hoisted_2","_createVNode","_component_ParteLateral","_hoisted_3"],"sources":["C:\\Users\\Kenny\\Downloads\\Proyect\\Proyect_Web\\src\\components\\ClientesTreinta.vue"],"sourcesContent":["<template>\r\n  <div class=\"row\">\r\n    <div class=\"col-lg-2 col-md-2 col-sm-2 partlt shadow\">\r\n      <ParteLateral></ParteLateral>\r\n    </div>\r\n    <div class=\"col-lg-10\">\r\n\r\n    </div>\r\n  </div>\r\n  \r\n</template>\r\n\r\n<script>\r\nimport Swal from 'sweetalert2'\r\nimport axios from 'axios'\r\nimport ParteLateral from '../components/ParteLateral.vue';\r\n\r\nexport default {\r\n  name: 'ClientesApp',\r\n  components: {\r\n    ParteLateral\r\n  },\r\n  data() {\r\n    return {\r\n      datosempl: [],\r\n      mostrarFormulario: false,\r\n      clientes: [],\r\n      nuevoCliente: {\r\n        IDCli: null,\r\n        NombreCli: '',\r\n        Telefono: '',\r\n        Adeudo: 0,\r\n        activo: true\r\n      },\r\n      modoEdicion: false,\r\n      busqueda: '',\r\n      clienteSeleccionado: null,\r\n      modalTitulo: '',\r\n      cantidadAdeudoAbono: 0,\r\n      esAdeudo: true,\r\n      mostrarModal: false\r\n    }\r\n  },\r\n  computed: {\r\n    clientesFiltrados() {\r\n      if (this.busqueda) {\r\n        return this.clientes.filter(cliente => cliente.NombreCli.toLowerCase().includes(this.busqueda.toLowerCase()))\r\n      }\r\n      return this.clientes\r\n    }\r\n  },\r\n  methods: {\r\n    async agregarCliente() {\r\n      const swalWithBootstrapButtons = Swal.mixin({\r\n        customClass: {\r\n          confirmButton: \"btn btn-success\",\r\n          cancelButton: \"btn btn-danger\"\r\n        },\r\n        buttonsStyling: false\r\n      });\r\n\r\n      if (this.modoEdicion) {\r\n        swalWithBootstrapButtons.fire({\r\n          title: \"¿Actualizar cliente?\",\r\n          text: \"¿Está seguro de que desea actualizar este cliente?\",\r\n          icon: \"question\",\r\n          showCancelButton: true,\r\n          confirmButtonText: \"Sí, actualizar\",\r\n          cancelButtonText: \"Cancelar\",\r\n          reverseButtons: true\r\n        }).then(async (result) => { \r\n          if (result.isConfirmed) {\r\n            const index = this.clientes.findIndex(cli => cli.id === this.nuevoCliente.IDCli)\r\n            await axios.put('http://localhost:3000/Neg/ClientesAct', {\r\n                IDCli: this.nuevoCliente.IDCli, \r\n                Nombrecli: this.nuevoCliente.NombreCli,\r\n                NumeroDeTelefonocli: this.nuevoCliente.Telefono,\r\n                Adeudo: this.nuevoCliente.Adeudo,\r\n                activocli: this.nuevoCliente.activo\r\n              })\r\n            this.resetearFormulario()\r\n            this.obtenerClientes()\r\n            if (index !== -1) {\r\n              this.datosempl[index] = { ...this.nuevoCliente };\r\n              this.resetearFormulario()\r\n              Swal.fire({\r\n                title: \"Cliente actualizado\",\r\n                icon: \"success\",\r\n              });\r\n            }\r\n          }\r\n        });\r\n      } else {\r\n        const nuevoId = Date.now().toString()\r\n        this.clientes.push({ ...this.nuevoCliente, id: nuevoId })\r\n        await axios.post('http://localhost:3000/Neg/clientes', {\r\n                IDcliente: this.nuevoCliente.IDEmpleado, \r\n                Nombrecli: this.nuevoCliente.NombreCli,\r\n                NumeroDeTelefonocli: this.nuevoCliente.Telefono,\r\n                Adeudo: this.nuevoCliente.Adeudo,\r\n                activocli: this.nuevoCliente.activo\r\n              })\r\n        this.resetearFormulario()\r\n        this.obtenerClientes()\r\n        Swal.fire({\r\n          title: \"Cliente añadido\",\r\n          icon: \"success\",\r\n        });\r\n      }\r\n    },\r\n    editarCliente(cliente) {\r\n      this.nuevoCliente = { ...cliente }\r\n      this.modoEdicion = true\r\n      this.mostrarFormulario = true\r\n    },\r\n    async borrarCliente(IDCli) {\r\n      const swalWithBootstrapButtons = Swal.mixin({\r\n        customClass: {\r\n          confirmButton: \"btn btn-success\",\r\n          cancelButton: \"btn btn-danger\"\r\n        },\r\n        buttonsStyling: false\r\n      });\r\n\r\n      swalWithBootstrapButtons.fire({\r\n        title: \"¿Está seguro?\",\r\n        text: \"No podrá revertir esta acción!\",\r\n        icon: \"warning\",\r\n        showCancelButton: true,\r\n        confirmButtonText: \"Sí, eliminar!\",\r\n        cancelButtonText: \"No, cancelar!\",\r\n        reverseButtons: true\r\n      }).then(async(result) => {\r\n        if (result.isConfirmed) {\r\n          //this.clientes = this.clientes.filter(cli => cli.IDCli !== IDCli)\r\n          try {\r\n            this.datosempl = this.datosempl.filter(emp => emp.IDCli !== IDCli);\r\n            await axios.delete(`http://localhost:3000/Neg/Clientes/${IDCli}`);\r\n          } catch (error) {\r\n            console.error(\"Error al eliminar el empleado:\", error);\r\n          }\r\n          this.obtenerClientes()\r\n          swalWithBootstrapButtons.fire({\r\n            title: \"Eliminado!\",\r\n            text: \"El cliente ha sido eliminado.\",\r\n            icon: \"success\"\r\n          });\r\n        }\r\n      });\r\n    },\r\n    resetearFormulario() {\r\n      this.nuevoCliente = {\r\n        IDCli: null, \r\n        NombreCli: '',\r\n        Telefono: '',\r\n        Adeudo: 0,\r\n        activo: true \r\n      }\r\n      this.mostrarFormulario = false\r\n      this.modoEdicion = false\r\n    },\r\n    cancelarEdicion() {\r\n      this.resetearFormulario()\r\n    },\r\n    validarTelefono(event) {\r\n      this.nuevoCliente.Telefono = event.target.value.replace(/[^0-9]/g, '')\r\n    },\r\n    buscarCliente() {\r\n      // La búsqueda se realiza automáticamente gracias al computed property\r\n    },\r\n    mostrarModalAdeudo(cliente) {\r\n      this.clienteSeleccionado = cliente\r\n      this.modalTitulo = 'Añadir Adeudo'\r\n      this.esAdeudo = true\r\n      this.cantidadAdeudoAbono = 0\r\n      this.mostrarModal = true\r\n    },\r\n    mostrarModalAbono(cliente) {\r\n      this.clienteSeleccionado = cliente\r\n      this.modalTitulo = 'Añadir Abono'\r\n      this.esAdeudo = false\r\n      this.cantidadAdeudoAbono = 0\r\n      this.mostrarModal = true\r\n    },\r\n    procesarAdeudoAbono() {\r\n      if (this.clienteSeleccionado) {\r\n        if (this.esAdeudo) {\r\n          this.clienteSeleccionado.Adeudo += this.cantidadAdeudoAbono\r\n        } else {\r\n          if (this.cantidadAdeudoAbono > this.clienteSeleccionado.Adeudo) {\r\n            Swal.fire({\r\n              title: \"Error\",\r\n              text: \"El abono no puede ser mayor que el adeudo actual.\",\r\n              icon: \"error\",\r\n            });\r\n            return\r\n          }\r\n          this.clienteSeleccionado.Adeudo -= this.cantidadAdeudoAbono\r\n        }\r\n        this.actualizarCliente(this.clienteSeleccionado)\r\n        this.cerrarModal()\r\n        Swal.fire({\r\n          title: this.esAdeudo ? \"Adeudo añadido\" : \"Abono realizado\",\r\n          icon: \"success\",\r\n        });\r\n      }\r\n    },\r\n    actualizarCliente(cliente) {\r\n      const index = this.clientes.findIndex(c => c.id === cliente.id)\r\n      if (index !== -1) {\r\n        this.$set(this.clientes, index, { ...cliente })\r\n      }\r\n    },\r\n    cerrarModal() {\r\n      this.mostrarModal = false\r\n    },\r\n    async obtenerClientes() {\r\n      try {\r\n        const response = await axios.get('http://localhost:3000/Neg/clientesget');\r\n        this.datosempl = response.data.results;\r\n        this.clientes = response.data.results;\r\n      } catch (error) {\r\n        console.error('Error al obtener los clientes:', error);\r\n        alert('Error al obtener los clientes');\r\n      }\r\n    }\r\n  },\r\n  mounted() {\r\n    this.obtenerClientes()\r\n  }\r\n}\r\n</script>\r\n"],"mappings":";;EACOA,KAAK,EAAC;AAAK;;EACTA,KAAK,EAAC;AAA0C;gCAGrDC,mBAAA,CAEM;EAFDD,KAAK,EAAC;AAAW;;;uBAJxBE,mBAAA,CAOM,OAPNC,UAOM,GANJF,mBAAA,CAEM,OAFNG,UAEM,GADJC,YAAA,CAA6BC,uBAAA,E,GAE/BC,UAEM,C","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}