{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport axios from 'axios';\nexport default {\n  name: 'NuevaVenta',\n  data() {\n    return {\n      products: [],\n      // Array para almacenar los productos\n      searchQuery: '',\n      // Variable para almacenar la consulta de búsqueda\n      cart: [],\n      // Array para almacenar los productos en el carrito\n      currentSection: 'Pagada',\n      // Define la sección inicial\n      selectedPaymentMethod: '',\n      // Variable para almacenar el método de pago seleccionado\n      ventaNombre: '',\n      // Variable para almacenar el nombre de la venta\n      ventaFecha: '',\n      // Variable para almacenar la fecha de la venta\n      clienteNombre: '',\n      // Variable para almacenar el nombre del cliente\n      IDNeg: 1,\n      clientName: '',\n      clientPhone: '',\n      clientEmail: ''\n    };\n  },\n  computed: {\n    filteredProducts() {\n      if (this.searchQuery.trim() === '') {\n        return this.products;\n      }\n      return this.products.filter(product => product.Nombre.toLowerCase().includes(this.searchQuery.toLowerCase()));\n    },\n    totalPrice() {\n      return this.cart.reduce((total, item) => total + item.PrecioVenta * item.Cantidad, 0).toFixed(2);\n    },\n    isCartEmpty() {\n      return this.cart.length === 0;\n    }\n  },\n  methods: {\n    async fetchProducts() {\n      try {\n        const response = await axios.get('http://localhost:3000/Producto'); // URL del endpoint\n        this.products = response.data.results;\n      } catch (error) {\n        console.error('Error al obtener productos:', error);\n      }\n    },\n    searchProduct() {\n      // La búsqueda ya se maneja a través de la propiedad computada\n    },\n    /*addProductToCart(product) {\r\n      const cartItem = this.cart.find(item => item.IDProducto === product.IDProducto);\r\n      if (cartItem) {\r\n        cartItem.Cantidad++;\r\n      } else {\r\n        this.cart.push({ ...product, Cantidad: 1 });\r\n      }\r\n    },*/\n    removeFromCart(product) {\n      this.cart = this.cart.filter(item => item.IDProducto !== product.IDProducto);\n    },\n    clearCart() {\n      this.cart = [];\n    },\n    prepareConfirmation() {\n      // Esta función es para cualquier preparación necesaria antes de mostrar el offcanvas\n    },\n    /*\r\n    async confirmProduct() {\r\n      try {\r\n        // Aquí se llama al endpoint para confirmar la venta\r\n        const response = await axios.post('http://localhost:3000/confirmarVenta', {\r\n          cart: this.cart,\r\n          total: this.totalPrice,\r\n          paymentMethod: this.selectedPaymentMethod,\r\n          ventaNombre: this.ventaNombre,\r\n          ventaFecha: this.ventaFecha,\r\n          clienteNombre: this.clienteNombre\r\n        });\r\n        console.log('Venta confirmada:', response.data);\r\n        this.clearCart(); // Vaciar la canasta después de confirmar la venta\r\n      } catch (error) {\r\n        console.error('Error al confirmar venta:', error);\r\n      }\r\n    },\r\n    /*\r\n    updateQuantity(product, amount) {\r\n      const cartItem = this.cart.find(item => item.IDProducto === product.IDProducto);\r\n      if (cartItem) {\r\n        cartItem.Cantidad += amount;\r\n        if (cartItem.Cantidad <= 0) {\r\n          this.removeFromCart(cartItem);\r\n        }\r\n      }\r\n    },*/\n    showSection(section) {\n      this.currentSection = section;\n    },\n    selectPaymentMethod(method) {\n      this.selectedPaymentMethod = method;\n    },\n    addProductToCart(product) {\n      if (product.CantidadExistencia <= 0) {\n        alert('No se puede agregar el producto. La cantidad es 0.');\n        return;\n      }\n      const cartItem = this.cart.find(item => item.IDProducto === product.IDProducto);\n      if (cartItem) {\n        if (cartItem.Cantidad < product.CantidadExistencia) {\n          cartItem.Cantidad++;\n        } else {\n          alert('No se puede agregar más cantidad del producto. Cantidad máxima alcanzada.');\n        }\n      } else {\n        this.cart.push({\n          ...product,\n          Cantidad: 1\n        });\n      }\n    },\n    updateQuantity(product, amount) {\n      const cartItem = this.cart.find(item => item.IDProducto === product.IDProducto);\n      if (cartItem) {\n        cartItem.Cantidad += amount;\n        if (cartItem.Cantidad <= 0) {\n          this.removeFromCart(cartItem);\n        } else if (cartItem.Cantidad > product.CantidadExistencia) {\n          alert('No se puede agregar más cantidad del producto. Cantidad máxima alcanzada.');\n          cartItem.Cantidad = product.CantidadExistencia;\n        }\n      }\n    },\n    async confirmProduct() {\n      try {\n        const saleData = {\n          total: this.totalPrice,\n          cart: this.cart,\n          clientName: this.clientName,\n          clientPhone: this.clientPhone,\n          selectedPaymentMethod: this.selectedPaymentMethod,\n          IDNeg: this.IDNeg\n        };\n        const response = await axios.post('http://localhost:3000/confirmventa', saleData);\n        console.log('Venta confirmada jsjsjsjsjs:', response.data);\n\n        // Obtener los datos del último registro\n        const dataResponse = await axios.get('http://localhost:3000/ventaexit');\n        const datosventaex = dataResponse.data;\n        alert(`Venta Exitosa:\n            ID Venta: ${datosventaex.IDVenta}\n            Total: ${datosventaex.CostoTotal}\n            ID Negocio: ${datosventaex.IDNegocio}`);\n        this.clearCart();\n      } catch (error) {\n        console.error('Error al confirmar venta ou no:', error);\n      }\n    }\n  },\n  mounted() {\n    this.fetchProducts(); // Obtener los productos cuando se monta el componente\n  }\n};","map":{"version":3,"names":["axios","name","data","products","searchQuery","cart","currentSection","selectedPaymentMethod","ventaNombre","ventaFecha","clienteNombre","IDNeg","clientName","clientPhone","clientEmail","computed","filteredProducts","trim","filter","product","Nombre","toLowerCase","includes","totalPrice","reduce","total","item","PrecioVenta","Cantidad","toFixed","isCartEmpty","length","methods","fetchProducts","response","get","results","error","console","searchProduct","removeFromCart","IDProducto","clearCart","prepareConfirmation","showSection","section","selectPaymentMethod","method","addProductToCart","CantidadExistencia","alert","cartItem","find","push","updateQuantity","amount","confirmProduct","saleData","post","log","dataResponse","datosventaex","IDVenta","CostoTotal","IDNegocio","mounted"],"sources":["C:\\Users\\Kenny\\Downloads\\Proyect\\Proyect_Web\\src\\components\\NuevaVenta.vue"],"sourcesContent":["app.post('/confirmventa', (req, res) => {\r\n  const {\r\n      total,\r\n      cart,\r\n      IDNeg,\r\n      clientName,\r\n      clientPhone,\r\n      selectedPaymentMethod\r\n  } = req.body;\r\n\r\n  db.beginTransaction(err => {\r\n      if (err) {\r\n          console.error('Error al iniciar transacción:', err);\r\n          return res.status(500).send('Error al iniciar transacción');\r\n      }\r\n\r\n      let idPorCobrar = null;\r\n      let idAbrirCaja = null;\r\n\r\n      // Obtener el ID de la última caja abierta\r\n      const obtenerUltimaCajaAbierta = () => {\r\n          return new Promise((resolve, reject) => {\r\n              db.query(`\r\n                  SELECT IDAbrirCaja\r\n                  FROM AbrirCaja\r\n                  WHERE Estado = 'Abierta'\r\n                  ORDER BY IDAbrirCaja DESC\r\n                  LIMIT 1\r\n              `, (err, results) => {\r\n                  if (err) {\r\n                      return reject(err);\r\n                  }\r\n                  if (results.length === 0) {\r\n                      return reject(new Error('No se encontraron cajas abiertas'));\r\n                  }\r\n                  idAbrirCaja = results[0]?.IDAbrirCaja;\r\n                  resolve();\r\n              });\r\n          });\r\n      };\r\n\r\n      const insertCliente = () => {\r\n          return new Promise((resolve, reject) => {\r\n              if (selectedPaymentMethod === 'Credito') {\r\n                  db.query(\r\n                      'INSERT INTO PorCobrar (Monto) VALUES (?)',\r\n                      [total],\r\n                      (err, results) => {\r\n                          if (err) {\r\n                              return reject(err);\r\n                          }\r\n                          idPorCobrar = results.insertId;\r\n\r\n                          db.query(\r\n                              'INSERT INTO clientes (NombreCli, Telefono, IDPorCobrar) VALUES (?, ?, ?)',\r\n                              [clientName, clientPhone, idPorCobrar],\r\n                              (err) => {\r\n                                  if (err) {\r\n                                      return reject(err);\r\n                                  }\r\n                                  resolve();\r\n                              }\r\n                          );\r\n                      }\r\n                  );\r\n              } else {\r\n                  resolve();\r\n              }\r\n          });\r\n      };\r\n\r\n      const insertVenta = () => {\r\n          return new Promise((resolve, reject) => {\r\n              db.query(\r\n                  'INSERT INTO venta (CostoTotal, IDNegocio, IDAbrirCaja, MetodoPago) VALUES (?, ?, ?, ?)',\r\n                  [total, IDNeg, idAbrirCaja, selectedPaymentMethod],\r\n                  (err, results) => {\r\n                      if (err) {\r\n                          return reject(err);\r\n                      }\r\n                      const idVenta = results.insertId;\r\n\r\n                      const detalleQueries = cart.map(item => [\r\n                          idVenta,\r\n                          item.IDProducto,\r\n                          item.Cantidad,\r\n                          item.PrecioVenta,\r\n                          idPorCobrar // Usar idPorCobrar obtenido previamente si existe\r\n                      ]);\r\n\r\n                      if (detalleQueries.length === 0) {\r\n                          return reject(new Error('El carrito está vacío, no se pueden insertar detalles'));\r\n                      }\r\n\r\n                      db.query(\r\n                          'INSERT INTO ventaprod (IDVenta, IDProducto, Cantidad, Precio, IDPorCobrar) VALUES ?',\r\n                          [detalleQueries],\r\n                          (err) => {\r\n                              if (err) {\r\n                                  return reject(err);\r\n                              }\r\n                              resolve(idVenta);\r\n                          }\r\n                      );\r\n                  }\r\n              );\r\n          });\r\n      };\r\n\r\n      const actualizarInventario = (idVenta) => {\r\n          return new Promise((resolve, reject) => {\r\n              let updateCount = 0;\r\n              const totalItems = cart.length;\r\n\r\n              if (totalItems === 0) {\r\n                  return resolve();\r\n              }\r\n\r\n              cart.forEach(item => {\r\n                  db.query(\r\n                      'UPDATE Producto SET CantidadExistencia = CantidadExistencia - ? WHERE IDProducto = ?',\r\n                      [item.Cantidad, item.IDProducto],\r\n                      (err) => {\r\n                          if (err) {\r\n                              return reject(err);\r\n                          }\r\n                          updateCount++;\r\n                          if (updateCount === totalItems) {\r\n                              resolve(idVenta);\r\n                          }\r\n                      }\r\n                  );\r\n              });\r\n          });\r\n      };\r\n\r\n      obtenerUltimaCajaAbierta()\r\n          .then(() => insertCliente())\r\n          .then(() => insertVenta())\r\n          .then(idVenta => actualizarInventario(idVenta))\r\n          .then(idVenta => {\r\n              db.commit(err => {\r\n                  if (err) {\r\n                      return db.rollback(() => {\r\n                          console.error('Error al confirmar la transacción:', err);\r\n                          res.status(500).send('Error al confirmar la transacción');\r\n                      });\r\n                  }\r\n\r\n                  res.json({\r\n                      id: idVenta,\r\n                      message: 'Venta registrada correctamente'\r\n                  });\r\n              });\r\n          })\r\n          .catch(err => {\r\n              db.rollback(() => {\r\n                  console.error('Error durante la transacción:', err);\r\n                  res.status(500).send('Error durante la transacción');\r\n              });\r\n          });\r\n});\r\n\r\n\r\n  }\r\n  );\r\n\r\n\r\n\r\n\r\n\r\napp.get('/ventaexit', (req, res) => {\r\n  db.query('SELECT * FROM venta ORDER BY IDVenta DESC LIMIT 1', (err, results) => {\r\n      if (err) {\r\n          console.error('Error al obtener datos de la base de datos:', err);\r\n          return res.status(500).send('Error al obtener datos de la base de datos');\r\n      }\r\n      res.json(results[0]); // Enviar solo el último registro\r\n  });\r\n});\r\n\r\n<script>\r\nimport axios from 'axios';\r\n\r\nexport default {\r\n  name: 'NuevaVenta',\r\n  data() {\r\n    return {\r\n      products: [], // Array para almacenar los productos\r\n      searchQuery: '', // Variable para almacenar la consulta de búsqueda\r\n      cart: [], // Array para almacenar los productos en el carrito\r\n      currentSection: 'Pagada', // Define la sección inicial\r\n      selectedPaymentMethod: '', // Variable para almacenar el método de pago seleccionado\r\n      ventaNombre: '', // Variable para almacenar el nombre de la venta\r\n      ventaFecha: '', // Variable para almacenar la fecha de la venta\r\n      clienteNombre: '', // Variable para almacenar el nombre del cliente\r\n      IDNeg : 1,\r\n\r\n      clientName:'',\r\n      clientPhone:'',\r\n      clientEmail:'',\r\n\r\n    };\r\n  },\r\n  computed: {\r\n    filteredProducts() {\r\n      if (this.searchQuery.trim() === '') {\r\n        return this.products;\r\n      }\r\n      return this.products.filter(product =>\r\n        product.Nombre.toLowerCase().includes(this.searchQuery.toLowerCase())\r\n      );\r\n    },\r\n    totalPrice() {\r\n      return this.cart.reduce((total, item) => total + (item.PrecioVenta * item.Cantidad), 0).toFixed(2);\r\n    },\r\n    isCartEmpty() {\r\n      return this.cart.length === 0;\r\n    }\r\n  },\r\n  methods: {\r\n    async fetchProducts() {\r\n      try {\r\n        const response = await axios.get('http://localhost:3000/Producto'); // URL del endpoint\r\n        this.products = response.data.results;\r\n      } catch (error) {\r\n        console.error('Error al obtener productos:', error);\r\n      }\r\n    },\r\n    searchProduct() {\r\n      // La búsqueda ya se maneja a través de la propiedad computada\r\n    },\r\n    /*addProductToCart(product) {\r\n      const cartItem = this.cart.find(item => item.IDProducto === product.IDProducto);\r\n      if (cartItem) {\r\n        cartItem.Cantidad++;\r\n      } else {\r\n        this.cart.push({ ...product, Cantidad: 1 });\r\n      }\r\n    },*/\r\n    removeFromCart(product) {\r\n      this.cart = this.cart.filter(item => item.IDProducto !== product.IDProducto);\r\n    },\r\n    clearCart() {\r\n      this.cart = [];\r\n    },\r\n    prepareConfirmation() {\r\n      // Esta función es para cualquier preparación necesaria antes de mostrar el offcanvas\r\n    },\r\n    /*\r\n    async confirmProduct() {\r\n      try {\r\n        // Aquí se llama al endpoint para confirmar la venta\r\n        const response = await axios.post('http://localhost:3000/confirmarVenta', {\r\n          cart: this.cart,\r\n          total: this.totalPrice,\r\n          paymentMethod: this.selectedPaymentMethod,\r\n          ventaNombre: this.ventaNombre,\r\n          ventaFecha: this.ventaFecha,\r\n          clienteNombre: this.clienteNombre\r\n        });\r\n        console.log('Venta confirmada:', response.data);\r\n        this.clearCart(); // Vaciar la canasta después de confirmar la venta\r\n      } catch (error) {\r\n        console.error('Error al confirmar venta:', error);\r\n      }\r\n    },\r\n    /*\r\n    updateQuantity(product, amount) {\r\n      const cartItem = this.cart.find(item => item.IDProducto === product.IDProducto);\r\n      if (cartItem) {\r\n        cartItem.Cantidad += amount;\r\n        if (cartItem.Cantidad <= 0) {\r\n          this.removeFromCart(cartItem);\r\n        }\r\n      }\r\n    },*/\r\n    showSection(section) {\r\n      this.currentSection = section;\r\n    },\r\n    selectPaymentMethod(method) {\r\n      this.selectedPaymentMethod = method;\r\n    },\r\n    addProductToCart(product) {\r\n      if (product.CantidadExistencia <= 0) {\r\n        alert('No se puede agregar el producto. La cantidad es 0.');\r\n        return;\r\n      }\r\n\r\n      const cartItem = this.cart.find(item => item.IDProducto === product.IDProducto);\r\n      if (cartItem) {\r\n        if (cartItem.Cantidad < product.CantidadExistencia) {\r\n          cartItem.Cantidad++;\r\n        } else {\r\n          alert('No se puede agregar más cantidad del producto. Cantidad máxima alcanzada.');\r\n        }\r\n      } else {\r\n        this.cart.push({ ...product, Cantidad: 1 });\r\n      }\r\n    },\r\n    updateQuantity(product, amount) {\r\n      const cartItem = this.cart.find(item => item.IDProducto === product.IDProducto);\r\n      if (cartItem) {\r\n        cartItem.Cantidad += amount;\r\n        if (cartItem.Cantidad <= 0) {\r\n          this.removeFromCart(cartItem);\r\n        } else if (cartItem.Cantidad > product.CantidadExistencia) {\r\n          alert('No se puede agregar más cantidad del producto. Cantidad máxima alcanzada.');\r\n          cartItem.Cantidad = product.CantidadExistencia;\r\n        }\r\n      }\r\n    },\r\n    async confirmProduct() {\r\n      try {\r\n\r\n        const saleData = {\r\n          total: this.totalPrice,\r\n          cart: this.cart,\r\n          clientName: this.clientName,\r\n          clientPhone: this.clientPhone,\r\n          selectedPaymentMethod: this.selectedPaymentMethod,\r\n          IDNeg: this.IDNeg\r\n        };\r\n        const response = await axios.post('http://localhost:3000/confirmventa', saleData);\r\n\r\n        console.log('Venta confirmada jsjsjsjsjs:', response.data);\r\n\r\n        \r\n\r\n        // Obtener los datos del último registro\r\n        const dataResponse = await axios.get('http://localhost:3000/ventaexit');\r\n        const datosventaex = dataResponse.data;\r\n        alert(`Venta Exitosa:\r\n            ID Venta: ${datosventaex.IDVenta}\r\n            Total: ${datosventaex.CostoTotal}\r\n            ID Negocio: ${datosventaex.IDNegocio}`);\r\n        this.clearCart();\r\n\r\n      } catch (error) {\r\n        console.error('Error al confirmar venta ou no:', error);\r\n      }\r\n    },\r\n  },\r\n  mounted() {\r\n    this.fetchProducts(); // Obtener los productos cuando se monta el componente\r\n  }\r\n};\r\n</script>\r\n\r\n\r\n<style scoped>\r\n.card1 {\r\n  margin-bottom: 20px;\r\n  box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);\r\n  border-radius: 10px;\r\n}\r\n\r\n.card1 img {\r\n  height: 200px;\r\n  object-fit: cover;\r\n  border-radius: 10px;\r\n}\r\n\r\n.canasta-card {\r\n  width: 100%;\r\n}\r\n\r\n.offcanvas-title {\r\n  font-size: 20px;\r\n  font-weight: bold;\r\n  margin-bottom: 20px;\r\n}\r\n\r\n.offcanvas-body label {\r\n  display: block;\r\n  margin-bottom: 10px;\r\n  font-weight: bold;\r\n}\r\n\r\n.offcanvas-body input[type=\"date\"],\r\n.offcanvas-body .btn-outline-secondary,\r\n.offcanvas-body input[type=\"text\"] {\r\n  width: 100%;\r\n  padding: 10px;\r\n  margin-bottom: 10px;\r\n  border-radius: 5px;\r\n  border: 1px solid #ccc;\r\n}\r\n\r\n.offcanvas-body .opciones {\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n  gap: 10px;\r\n}\r\n\r\n.offcanvas-body .opciones button {\r\n  flex: 1 1 calc(50% - 10px);\r\n}\r\n\r\n.offcanvas-body .btn-primary {\r\n  width: 100%;\r\n  padding: 10px;\r\n  font-size: 16px;\r\n  border-radius: 5px;\r\n}\r\n\r\n.tab-buttons button {\r\n  background-color: transparent;\r\n  border: none;\r\n  font-size: 16px;\r\n  margin-right: 20px;\r\n  cursor: pointer;\r\n}\r\n\r\n.tab-buttons {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  margin-bottom: 20px;\r\n}\r\n\r\n.tab-buttons button {\r\n  flex: 1;\r\n  margin-right: 10px;\r\n}\r\n\r\n.tab-buttons button:last-child {\r\n  margin-right: 0;\r\n}\r\n\r\n.tab-buttons button.active {\r\n  font-weight: bold;\r\n  border-bottom: 2px solid #000;\r\n}\r\n\r\nbutton.active {\r\n  background-color: #007bff;\r\n  color: white;\r\n  border-color: #007bff;\r\n}\r\n</style>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}